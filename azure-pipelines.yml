trigger:
  - feature/cd

pool:
  vmImage: ubuntu-20.04

stages:
  - stage: CI
    displayName: Continuous integration
    jobs:
      - job: Build
        displayName: Build and test
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "16.x"
            displayName: "Install Node.js"
          - script: npm i
            displayName: "Install dependencies"
          - script: npm run build:electron
            displayName: "Build"
          - script: npm run test -- --browsers ChromeNoSandboxHeadless --watch=false
            displayName: "Run tests"
  - stage: Testnet
    displayName: Testnet
    dependsOn: CI
    jobs:
      - job: PreValidation
        displayName: Pre-validation
        steps:
          - task: Bash@3
            displayName: Retrieve version number
            name: retrieveVersion
            inputs:
              targetType: "inline"
              script: |
                echo "##vso[task.setvariable variable=RELEASE_VERSION;isreadonly=true;isoutput=true]$(grep version package.json | sed 's/.*"version": "\(.*\)".*/\1/')"
      - job: WaitForValidation
        displayName: Wait for validation
        dependsOn: PreValidation
        pool: server
        timeoutInMinutes: 4320 # wait 3 days
        variables:
          RELEASE_VERSION: $[ dependencies.PreValidation.outputs['retrieveVersion.RELEASE_VERSION'] ]
        steps:
          - task: ManualValidation@0
            displayName: Wait for approval
            inputs:
              notifyUsers: "*"
              instructions: "Awaiting approval to build an official Testnet release with version $(RELEASE_VERSION)."
      - deployment: ReleaseForTestnet
        displayName: Testnet release
        dependsOn: WaitForValidation
        condition: and(succeeded('CI'), eq(variables['Build.SourceBranch'], 'refs/heads/feature/cd'))
        environment: test
        variables:
          RELEASE_VERSION: $[ dependencies.PreValidation.outputs['retrieveVersion.RELEASE_VERSION'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - script: npm run pack
                  displayName: "Pack"
                - task: GitHubRelease@1
                  inputs:
                    gitHubConnection: 'Opdex Desktop Releases'
                    repositoryName: 'Opdex/opdex-desktop'
                    action: 'create'
                    target: '$(Build.SourceVersion)'
                    tagSource: 'userSpecifiedTag'
                    tag: '$(RELEASE_VERSION)'
                    isDraft: true
                    isPreRelease: true
                    changeLogCompareToRelease: 'lastFullRelease'
                    changeLogType: 'commitBased'