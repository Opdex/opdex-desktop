trigger:
  - main

pool:
  vmImage: macOS-12

stages:
  - stage: CI
    displayName: Continuous integration
    jobs:
      - job: Build
        displayName: Build and test
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "16.x"
            displayName: "Install Node.js"
          - script: npm i
            displayName: "Install dependencies"
          - script: npm run build:electron
            displayName: "Build"
          - script: npm run test -- --browsers ChromeNoSandboxHeadless --watch=false
            displayName: "Run tests"
          - script: npm run pack -- --publish never
            displayName: "Pack"
          - task: PublishPipelineArtifact@1
            displayName: "Create artifact"
            inputs:
              targetPath: "$(Build.SourcesDirectory)/dist"
              publishLocation: "pipeline"
              artifact: "application"
  - stage: Deployment
    displayName: Deployment
    dependsOn: CI
    condition: and(succeeded('CI'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: PreValidation
        displayName: Pre-validation
        steps:
          - task: Bash@3
            displayName: Retrieve version number
            name: retrieveVersion
            inputs:
              targetType: "inline"
              script: |
                echo "##vso[task.setvariable variable=RELEASE_VERSION;isreadonly=true;isoutput=true]$(grep version package.json | sed 's/.*"version": "\(.*\)".*/\1/')"
      - job: WaitForValidation
        displayName: Wait for validation
        dependsOn: PreValidation
        pool: server
        timeoutInMinutes: 4320 # wait 3 days
        variables:
          RELEASE_VERSION: $[ dependencies.PreValidation.outputs['retrieveVersion.RELEASE_VERSION'] ]
        steps:
          - task: ManualValidation@0
            displayName: Wait for approval
            inputs:
              notifyUsers: "*"
              instructions: "Resume to create a release of version $(RELEASE_VERSION)."
      - deployment: Release
        displayName: Create release
        dependsOn: WaitForValidation
        environment: main
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: Retrieve version number
                  inputs:
                    targetType: "inline"
                    script: |
                      echo "##vso[task.setvariable variable=RELEASE_VERSION;isreadonly=true]$(grep version $(Pipeline.Workspace)/application/latest.yml | cut -d ' ' -f2-)"
                - task: Bash@3
                  displayName: Evaluate pre-release
                  inputs:
                    targetType: "inline"
                    script: |
                      echo "##vso[task.setvariable variable=IS_PRERELEASE;isreadonly=true]$(if [[ $(RELEASE_VERSION) == *"beta"* ]]; then echo "true"; else echo "false"; fi)"
                - task: GitHubRelease@1
                  inputs:
                    gitHubConnection: "Opdex Desktop"
                    repositoryName: "Opdex/opdex-desktop"
                    action: "create"
                    target: "$(Build.SourceVersion)"
                    tagSource: "userSpecifiedTag"
                    tag: "$(RELEASE_VERSION)"
                    title: "Opdex Desktop $(RELEASE_VERSION)"
                    assets: "$(Pipeline.Workspace)/application/*"
                    isDraft: true
                    isPreRelease: $(IS_PRERELEASE)
                    addChangeLog: true
                    changeLogType: commitBased
                    changeLogCompareToRelease: lastFullRelease
